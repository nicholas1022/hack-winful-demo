/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.winful.ordsys.api;

import com.winful.ordsys.dto.OrderDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-25T14:48:21.210539-04:00[America/Toronto]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "Order", description = "the Order API")
public interface OrderApi {

    default OrderApiDelegate getDelegate() {
        return new OrderApiDelegate() {};
    }

    /**
     * POST /order : create case
     *
     * @param orderDTO  (optional)
     * @return Order info (status code 200)
     */
    @Operation(
        operationId = "createOrder",
        summary = "create case",
        tags = { "Order" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Order info", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/order",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<OrderDTO> createOrder(
        @Parameter(name = "OrderDTO", description = "") @Valid @RequestBody(required = false) OrderDTO orderDTO
    ) {
        return getDelegate().createOrder(orderDTO);
    }


    /**
     * DELETE /order : delete case
     *
     * @param id  (optional)
     * @return Invalid ID supplied (status code 400)
     *         or Order not found (status code 404)
     */
    @Operation(
        operationId = "deleteOrder",
        summary = "delete case",
        tags = { "Order" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Order not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/order"
    )
    
    default ResponseEntity<Void> deleteOrder(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Long id
    ) {
        return getDelegate().deleteOrder(id);
    }


    /**
     * GET /order : Get a order by ID
     *
     * @param id  (optional)
     * @return Order info (status code 200)
     */
    @Operation(
        operationId = "getOrder",
        summary = "Get a order by ID",
        tags = { "Order" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Order info", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/order",
        produces = { "application/json" }
    )
    
    default ResponseEntity<OrderDTO> getOrder(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Long id
    ) {
        return getDelegate().getOrder(id);
    }


    /**
     * GET /order/page : Get a order page
     *
     * @param deliverDate  (optional)
     * @return Order info (status code 200)
     */
    @Operation(
        operationId = "getOrders",
        summary = "Get a order page",
        tags = { "Order" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Order info", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = OrderDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/order/page",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<OrderDTO>> getOrders(
        @Parameter(name = "deliverDate", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "deliverDate", required = false) String deliverDate
    ) {
        return getDelegate().getOrders(deliverDate);
    }


    /**
     * PUT /order : update case
     *
     * @param orderDTO  (optional)
     * @return Order info (status code 200)
     */
    @Operation(
        operationId = "updateOrder",
        summary = "update case",
        tags = { "Products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Order info", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = OrderDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/order",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<OrderDTO> updateOrder(
        @Parameter(name = "OrderDTO", description = "") @Valid @RequestBody(required = false) OrderDTO orderDTO
    ) {
        return getDelegate().updateOrder(orderDTO);
    }

}
