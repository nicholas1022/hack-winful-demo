/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.winful.ordsys.api;

import com.winful.ordsys.dto.ProductDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-25T22:50:24.337545-04:00[America/Toronto]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "Product", description = "the Product API")
public interface ProductApi {

    default ProductApiDelegate getDelegate() {
        return new ProductApiDelegate() {};
    }

    /**
     * PUT /product/cfmOnHoldQty : Confirm on hold quantity
     *
     * @param requestBody  (optional)
     * @return Invalid ID supplied (status code 400)
     *         or Order not found (status code 404)
     */
    @Operation(
        operationId = "confirmOnHoldQty",
        summary = "Confirm on hold quantity",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Order not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/product/cfmOnHoldQty",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> confirmOnHoldQty(
        @Parameter(name = "request_body", description = "") @Valid @RequestBody(required = false) List<Long> requestBody
    ) {
        return getDelegate().confirmOnHoldQty(requestBody);
    }


    /**
     * POST /product : Create a product
     *
     * @param productDTO  (optional)
     * @return product info (status code 200)
     */
    @Operation(
        operationId = "createProduct",
        summary = "Create a product",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "product info", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/product",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProductDTO> createProduct(
        @Parameter(name = "ProductDTO", description = "") @Valid @RequestBody(required = false) ProductDTO productDTO
    ) {
        return getDelegate().createProduct(productDTO);
    }


    /**
     * DELETE /product : Delete a product
     *
     * @param id  (optional)
     * @return Invalid ID supplied (status code 400)
     *         or Product not found (status code 404)
     */
    @Operation(
        operationId = "deleteProduct",
        summary = "Delete a product",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Product not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/product"
    )
    
    default ResponseEntity<Void> deleteProduct(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Long id
    ) {
        return getDelegate().deleteProduct(id);
    }


    /**
     * GET /product : Get a product by ID
     *
     * @param id  (optional)
     * @return Product info (status code 200)
     */
    @Operation(
        operationId = "getProduct",
        summary = "Get a product by ID",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product info", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/product",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ProductDTO> getProduct(
        @Parameter(name = "id", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) Long id
    ) {
        return getDelegate().getProduct(id);
    }


    /**
     * GET /product/page : Get a product page
     *
     * @param brand  (optional)
     * @return Product info (status code 200)
     */
    @Operation(
        operationId = "getProducts",
        summary = "Get a product page",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product info", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ProductDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/product/page",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ProductDTO>> getProducts(
        @Parameter(name = "brand", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "brand", required = false) String brand
    ) {
        return getDelegate().getProducts(brand);
    }


    /**
     * PUT /product : Update a product
     *
     * @param productDTO  (optional)
     * @return Product info (status code 200)
     */
    @Operation(
        operationId = "updateProduct",
        summary = "Update a product",
        tags = { "Product" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product info", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/product",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ProductDTO> updateProduct(
        @Parameter(name = "ProductDTO", description = "") @Valid @RequestBody(required = false) ProductDTO productDTO
    ) {
        return getDelegate().updateProduct(productDTO);
    }

}
